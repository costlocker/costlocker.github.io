FORMAT: 1A
HOST: https://new.costlocker.com/api-public

# Costlocker API

> Help us making the API better! Use Github [issues](https://github.com/costlocker/costlocker.github.io/issues)
> for reporting bugs or unclear documentation. 
> You can also fork [the blueprint](https://github.com/costlocker/costlocker.github.io/blob/master/docs/apiary.apib)
> and send a [pull request](https://github.com/costlocker/costlocker.github.io/pulls) with improvements. Thanks!

### Changelog

#### _July 2015_

* **Simple API** - we provide read only access at this time!
* **General response attributes**
    * `deactivated` - the Boolean value determines whether the item in Costlocker is marked as active (`false` value) or inactive (`true` value).
    * `da_*` - all `date` keys or keys prefixed with `da_` contain **date** type values (e.g. `2016-11-24`).

#### _November 2016_

* **Simple_People** - add attributes `type`; `salary_hours`, `salary_amount` or `hourly_rate`
* **Simple_Projects** - add support for filtering by id (`project`) and pagination (`limit`, `offset`)
* **Simple_Projects_Ce** - add attributes `person_rate`, `person_overhead` and filtering by `project`, `person`, `activity`, `client`
* **Simple_Timesheet** - add pagination (`limit`, `offset`) and `withRates` parameter

#### _March 2017_

* We've open-sourced our internal tool for [generating profitability reports](https://github.com/costlocker/reports)

#### _April 2017_

We've started working on Costlocker API v2, providing write access to Costlocker and
enabling you to integrate Costlocker with other products you or your company uses (Toggl, Harvest, ...).

* authenticate with **personal access token** (https://new.costlocker.com/api-token. )
* create/update **projects** (detail, people costs)
* create/update **time entries**
* manage **webhooks** (`timeentries.create`, `timeentries.update`, `projects.create`, `peoplecosts.change`)

#### _May 2017_

We've enabled integrations for 3rd party applications via OAuth2.
Take a look at an app for [importing projects from Harvest](https://harvest.integrations.costlocker.com/).

* authenticate with **OAuth2**
* create/update **projects** (project expenses, discount, billing)
* basic information about **user and authorized applications**
* improve DX (accepted date/time format, error messages for forbidden actions)
* **restrict authorization**
    * OAuth2 or personal access token cannot be used for authorizing at `app.costlocker.com`
    * restrict [Simple API](#reference/0/simple-api-v1) for employees and managers authorized by OAuth2 or personal access token

#### _June 2017_

* add attributes `state` and `project_id` to projects, filter projects by `state`
* add webhook signature [`X-Hook-Signature`](/#reference/0/webhooks/get-webhook-example)
* add enabled addons to [`company`](/#reference/0/me/user-detail)
* **Simple API** - filter billing and expenses by `project`, filter projects by `state`, include `recurring` projects

#### _July 2017_

* add `recent_deliveries` to [webhook detail](/#reference/0/webhooks/get-webhook-detail)
* fix `date` format in `timeentries` event (`2017-03-28T09:46:00+0000`)
* [interactive webhooks manager](https://webhooks.integrations.costlocker.com/)

#### _August 2017_

* **[webhooks](/#reference/0/webhooks)** enable/disable webhook via [`is_enabled`], don't send webhooks with no events
* fix ordering [`peoplecosts` in project detail](/#reference/0/projects/get-project-detail) and [`Simple_Projects_Ce`](/#reference/0/projects-people-costs/filtered-people-costs)

#### _December 2017_

* add **person id** to [user detail](#reference/0/me/user-detail)
* [Simple_Timesheet](/#reference/0/timesheet/filtered-entries) - filter by `uuid`, filter running entries by `isRunning`, return `uuid` if request has **withUuids**
* start **tracking** if [`duration = null`](/#reference/0/time-entries/create/update-time-entries)

#### _January 2018_

* [projects list](#reference/0/projects/get-projects)
    * paginate projects - `?page[offset]=0&page[limit]=10`
    * optionally load projects items - `?types=peoplecosts`
    * add projects count to `meta` field
* add **`action`**  (`create`, `update`, `nothing`) to [time-entries response](#reference/0/time-entries/create/update-time-entries)
* [rate limits](#reference/0/rest-api-v2/rate-limits) - **20 000 API requests per 24 hours**
* _bugfixes/improvements:_
    * fix duplicating task names when `task_id` is not used
    * improve error message when JSON cannot be parsed

#### _February 2018_

* [rate limit](#reference/0/rest-api-v2/rate-limits) resets at UTC midnight (_[the time zone of the Costlocker company](https://new.costlocker.com/settings/company) is ignored_)
* **2018-02-28** - redirect `app.costlocker.com`
    * please change domain and [authentication mechanism](/#reference/0/authentication)
    * _before:_ `curl -X POST -H "Api-Token:$TOKEN" "https://app.costlocker.com/api-public/v1/" -d '{"Simple_Tags": {}}'`
    * _after:_ `curl -X POST -u "my_app:$TOKEN" "https://new.costlocker.com/api-public/v1/" -d '{"Simple_Tags": {}}'`

#### _March 2018_

* [Simple_Overheads](#reference/0/overhead-costs) - https://new.costlocker.com/dashboard/overhead
* Delete documentation for legacy GET request format for [`API v1`](/#reference/0/simple-api-v1), [POST format](/#reference/0/simple-api-v1/post-request) is preferred

#### _April 2018_

* Project budgets - [blog](https://costlocker.github.io/blog/2017-05-14-import-projects-to-costlocker.html#budgets), [doc diff](https://github.com/costlocker/costlocker.github.io/commit/5f454cb), [webhook diff](https://www.diffchecker.com/QHGKh071)
    * **[projects](/#reference/0/projects/get-project-detail)** - add `budget.type`, add `budget.total_amount` to _activity_ item, add _project_ item with `budget.total_amount`
    * **[webhooks](/#reference/0/webhooks/get-webhook-example)** - add `hours.budget`, `budget.total_amount` to _activity_ item, _project_ item for fixed priced project
    * **[Simple_Projects](/#reference/0/clients/filtered-projects)** - add `budget.type`, `budget.total_amount`
    * **[Simple_Projects_Ce](/#reference/0/projects-people-costs/filtered-people-costs)** - add `budget_activity.total_amount`, `budget_activity.total_hours`

#### _May 2018_

* Allow [creating time-entry](#reference/0/time-entries/create/update-time-entries) with `"uuid": null`

#### _July 2018_

* [Create/edit time-entry](#reference/0/time-entries/create/update-time-entries) from finished projects with `meta.finished_projects`
* Running entry and available assignments in [tracking simple API](#reference/0/tracking/)

#### _September 2018_

* Add [**no budget**](https://costlocker.github.io/blog/2017-05-14-import-projects-to-costlocker.html#no-budget-no_budget)
* **Billable/non-billable hours**
    * [Time-entries](/#reference/0/time-entries/create/update-time-entries) - set `billable` or `nonbillable` tag
    * [Simple_Timesheet](/#reference/0/timesheet/filtered-entries) - add `billable` field if request has `withBillable`
* Enable advanced [project `action`](/#reference/0/projects): **delete, finish, reopen**

### Data Structures

#### clUuid (string, optional) - `87d2a4e5-5a2e-413d-ab4b-5b3771cc03c1`

#### clDate (string) - `2016-12-24`

#### clDatetime (string) - `2016-12-24 20:00:50`

#### clLiberalDate (enum)
+ clDate: `2016-12-24` (string) - date
+ clDatetime: `2016-12-24 20:00:50` (string) - date and time

#### clProjectEdit (clProject)
+ action (clProjectAction, optional)

#### clProjectAction (enum[string])
+ upsert - default action, if `action` is not specified
+ delete - delete an project. You can't undo this!
+ finish - finish an running project
+ reopen - reopen an finished project

#### clProject (object)
+ id (number, optional)
+ name (string, required)
+ state (clProjectState, optional)
+ client (enum, required)
    + string - client name (case insensitive)
    + number - client id
    + (object)
        + name (string) - client name (case insensitive)
        + id (number) - client id
+ dates (object, optional)
    + date_start (clLiberalDate, required)
    + date_end (clLiberalDate, required)
+ project_id (object, optional)
    + id (string, optional)
    + is_generated: false (boolean, optional)
+ tags (array, optional)
    + (enum)
        + string - tag name (case insensitive)
        + number - tag id (legacy)
        + (object)
            + name (string) - tag name (case insensitive)
+ responsible_people (array, optional)
    + (enum)
        + string - person email
        + number - person id
        + (object)
            + email (string) - person email
        + (clPerson) - newly created person
+ budget (object, optional)
    + type (clBudgetType, optional)
+ items (array[clProjectItem], optional)

#### clPerson (object)
+ email (string, required)
+ first_name (string, optional)
+ last_name (string, optional)
+ role (enum[string], optional)
    + ADMIN
    + MANAGER
    + EMPLOYEE
+ salary (object, optional)
    + payment (enum, required)
        + monthly
        + hourly
    + salary (number, optional) - for `monthly` salary
    + hours (number, optional) - for `monthly` salary
    + date_start (clLiberalDate, optional) - for `monthly` salary
    + hourly_rate (number, optional) - for `hourly` salary

#### clProjectItem (object)
+ action (enum[string], optional)
    + upsert - default action, if `action` is not specified
    + delete
+ item (enum, required) - item definition, ids are always in `item`, additional data (name, ...) are in specific fields (activity, ...)
    + clProjectItemType
    + (object)
        + type (clProjectItemType, required)
        + activity_id (number, optional)
        + person_id (number, optional)
        + task_id (number, optional)
        + billing_id (number, optional)
        + expense_id (number, optional)
+ hours (enum)
    + number - short-syntax for updating hours budget
    + (object)
        + budget (number)
+ budget (object)
    + type (clBudgetType, optional)
    + total_amount (number, required)
+ activity (enum)
    + string - activity name (case insensitive)
    + (object)
        + string (number) - activity name (case insensitive)
        + hourly_rate (number)
+ person (enum)
    + string - person email
    + (clPerson) - full person
+ task (enum)
    + string - task name (case insensitive)
    + (object)
        + string - task name (case insensitive)
+ billing (object)
    + description (number)
    + total_amount (number)
    + date (clLiberalDate)
    + status (enum)
        + draft
        + sent
+ expense (object)
    + description (number)
    + purchased (object)
        + date (clLiberalDate)
        + total_amount (number)
    + billed (object)
        + total_amount (number)
+ discount (object)
    + total_amount (number)

#### clProjectItemType (enum[string])
+ `project`
+ `activity`
+ `person`
+ `task`
+ `billing`
+ `expense`
+ `discount`

#### clProjectState (enum[string])
+ `running`
+ `finished`

#### clBudgetType (enum[string])
+ `time_estimates.person_activity`
+ `time_estimates.activity`
+ `timesheet`
+ `no_budget`
+ `fixed_price.activity`
+ `fixed_price.project`

#### clTimeentry (object)
+ uuid (clUuid, optional) - uuid of new timeentry, existing uuid for updating existing timeentry
+ date: `2017-03-28T09:46:00+0000` (clLiberalDate, required) - start datetime
+ duration: 3600 (number, required) - duration in seconds
+ description (string, optional) - description
+ assignment (clTimeentryAssignment, required)
+ tags (array, optional)
    + (enum)
        + billable
        + nonbillable

#### clTimeentryAssignment (object)
+ person_id (number, optional) - authenticated person is used if the id is missing
+ project_id: 1 (number, required)
+ activity_id: 1 (number, required) 
+ task_id (number, optional)

#### clWebhookDelete (object)
+ uuid (clUuid, required)

#### clWebhookCreate (clWebhookDelete)
+ links (object)
    + webhook (string, required)

#### clWebhookFull (clWebhookCreate)
+ url (string, required)
+ is_enabled (boolean, optional)
+ events (clWebhookEvents, required)

#### clWebhookDetail (clWebhookFull)
+ recent_deliveries (array, required)
    + (object)
        + date: `2017-03-28T09:46:00+0000` (string, required)
        + request (object)
            + url (string)
            + headers (object)
            + body (object)
        + response (object)
            + status_code (number)
            + headers (object)
            + duration (number)

#### clWebhookRequest (object)
+ uuid (clUuid, optional) - uuid of new timeentry, existing uuid for updating existing timeentry
+ url (string, required)
+ is_enabled (boolean, optional)
+ events (clWebhookEvents, required)

#### clMetaUpsert (object)
+ created: 1 (number, optional) - number of created entities
+ updated: 0 (number, optional) - number of updated entities

#### clWebhookEvents (array)
+ (enum[string])
    + `timeentries.create`
    + `timeentries.update`
    + `projects.create`
    + `peoplecosts.change`
    + `expenses.change`
    + `billing.change`

#### jsonApiResponse (object)
+ `meta` (object, optional) - information about a resource(s), e.g. how many entries were created/updated
+ `data` (array[object], required)) - primary data, e.g webhook(s)
+ `links` (object, optional) - links related to the resource, e.g. link to webhook detail

#### jsonApiErrors (object)
+ errors (array, required) - http://jsonapi.org/examples/#error-objects
    + (object)
        + `status`: 400 (number, required)
        + `title`: `Unauthorized access` (string, required)
        + `detail`: `Invalid Api-Token` (string, required)
        + `source` (object, optional)
            + pointer: `/0/events/0` (string, required)

## REST API v2 [/v2/?about]

The API is REST-based. Responses are JSON, and errors are reported via standard HTTP codes and 
[json:api errors](http://jsonapi.org/examples/#error-objects). 
We use authentication with personal access tokens and [OAuth 2](http://tools.ietf.org/html/rfc6749).

### Request [POST /v2/?about]

We accept multiple JSON formats. You can send just one object, many objects in array. 
Additionaly you can encapsulate request in [json:api `data` field](http://jsonapi.org/format/#document-top-level).

_Notice: examples are always using `data` field with array of objects._

+ Request OBJECT (application/json)

    + Body
    
            {
                "date": "2017-03-28 09:46:00",
                "duration": 3600,
                "assignment": {
                    "project_id": 1,
                    "activity_id": 1
                }
            }

+ Request OBJECTS_IN_ARRAY (application/json)

    + Body
    
            [
                {
                    "date": "2017-03-28 09:46:00",
                    "duration": 3600,
                    "assignment": {
                        "project_id": 1,
                        "activity_id": 1
                    }
                }
            ]

+ Request JSONAPI_OBJECT (application/vnd.api+json)

    + Body
    
            {
                "data": {
                    "date": "2017-03-28 09:46:00",
                    "duration": 3600,
                    "assignment": {
                        "project_id": 1,
                        "activity_id": 1
                    }
                }
            }

+ Request JSONAPI_OBJECTS (application/vnd.api+json)

    + Body
    
            {
                "data": [
                    {
                        "uuid": "c85d843e-c2ed-479e-9159-dda5e14177ab",
                        "description": "Init project",
                        "date": "2017-03-28 07:57:57",
                        "duration": 3600,
                        "assignment": {
                            "person_id": 1,
                            "project_id": 1,
                            "activity_id": 1,
                            "task_id": 1
                        }
                    },
                    {
                        "date": "2017-03-28 09:46:00",
                        "duration": 3600,
                        "assignment": {
                            "project_id": 1,
                            "activity_id": 1
                        }
                    }
                ]
            }

### Response [GET /v2/?about]

We return [json:api responses](http://jsonapi.org/format/#document-structure). `data` contains raw json response, we aren't using `attributes` or `relationships`.

+ Response 200 (application/json)

    + Attributes (jsonApiResponse)

    + Body

            {
                "meta": {
                    "created": 1,
                    "updated": 0
                },
                "data": [
                    {
                        "uuid": "b0537a3d-ee6e-45d1-8734-2b4cdc00cfb3",
                        "links": {  
                            "webhook":"https://new.costlocker.com/api-public/v2/webhooks/dd76b5e0-5b74-4a68-b0ad-db6efbed7b9c",
                            "example":"https://new.costlocker.com/api-public/v2/webhooks/dd76b5e0-5b74-4a68-b0ad-db6efbed7b9c/test"
                        }
                    }
                ],
                "links":{
                    "documentation":"http://docs.costlocker.apiary.io/",
                    "authentication":"https://new.costlocker.com/api-token"
                }
            }

### Errors [GET /v2/?about]

We return [json:api errors](http://jsonapi.org/examples/#error-objects). [Let us know](https://github.com/costlocker/costlocker.github.io/issues)
if you get some unclear error. We are dedicated to make errors as human readable as possible.

_Notice: All requests are validated as array of objects. Even if you send one object, you'll get the error `source.pointer` starting with `/0/` (first item in array)._

+ Response 400 (application/vnd.api+json)

    + Attributes (jsonApiErrors)

    + Body

            {
                "errors": [
                    {
                        "status": 400,
                        "title": "Invalid JSON request",
                        "source": {
                            "pointer": "/0/url"
                        },
                        "detail": "Value \"not a url\" does not match the format \"uri\""
                    }
                ]
            }

+ Response 404 (application/vnd.api+json)

    + Attributes (jsonApiErrors)

    + Body

            {
                "errors": [
                    {
                        "status": 404,
                        "title": "Webhook not found",
                        "detail": "Webhook 'bfef6a2d-cef4-d55c-97c3-203208177bd1' does not exist, or you are not authorized to see it"
                    }
                ]
            }

### Rate limits [GET /v2/?RateLimit]

OAuth client or access token can make **20 000 API requests per 24 hours**.
The returned HTTP headers of any API request show your current rate limit status.

Once you exceed the limit, calls will return HTTP status `429 Too Many Requests`.
The daily limit resets at UTC midnight.

_You can reduce the number of calls by decreasing the polling frequency, using bulk API,
or caching data. Let us know, you're still hitting rate limits, even if you're using the API efficiently._

+ Response 429 (application/vnd.api+json)

    + Attributes (jsonApiErrors)

    + Headers

            X-RateLimit-Limit: 50000
            X-RateLimit-Remaining: 46743
            X-RateLimit-Reset: 1517270400
            
    + Body

            {
                "errors": [
                    {
                        "status": 429,
                        "title": "Too many requests",
                        "detail": "You have reached your daily limit."
                    }
                ]
            }

## Authentication [/v2/?auth]

Every API request is signed with `Authorization` header.
API uses roles for basic scoping, that means that employee cannot create projects etc.
Roles are defined in [Costlocker web app](https://new.costlocker.com).

### Personal Access Token [GET /v2/?auth]

You can generate an access token that provides API access at https://new.costlocker.com/api-token.
Whenever you generate a new token, all previous tokens are automatically invalidated.

Use your app name and personal token in Authorization header: `Authorization:Basic base64(app:token)`.

+ Request (text/plain)

    + Attributes

        + app (string, required) - name of your application
        + token (string, required) - your personal access token from https://new.costlocker.com/api-token

    + Headers

            Authorization:Basic base64(app:token)

+ Response 200 (application/json)

        {
           "links":{
              "documentation":"http://docs.costlocker.apiary.io/",
              "authentication":"https://new.costlocker.com/api-token"
           }
        }

+ Response 403 (application/vnd.api+json)

    + Body

            {
                "errors": [
                   {
                        "status": 403,
                        "title": "Unauthorized access",
                        "detail": "Invalid Api-Token"
                    }
                ]
            }

+ Response 403 (application/vnd.api+json)

    + Body

            {
                "errors": [
                    {
                        "status": 403,
                        "title": "Unauthorized access",
                        "detail": "Missing app_name (username in basic auth)"
                    }
                ]
            }

### OAuth 2 [GET /oauth2/]

1. Register your app (name, `redirect_url`) at https://new.costlocker.com/settings/api and you'll be assigned a `client_id` and `client_secret`.
1. Select [an OAuth 2 client library](https://oauth.net/code/#client-libraries) ([php demo](https://gist.github.com/costlockerbot/53b0b29c5787086709ff151516bd91f3))
1. Configure the client
    1. Request authorization at https://new.costlocker.com/api-public/oauth2/authorize
    1. Get access token at https://new.costlocker.com/api-public/oauth2/access_token
1. Use access token in Authorization header `Authorization: Bearer ACCESS_TOKEN`

### OAuth 2 - request authorization [GET /oauth2/authorize{?client_id,response_type,state}]

+ Parameters
    + `client_id`: `YOUR_CLIENT_ID` (string, required)
    + response_type: code (enum[string], required)
    + state: CSRF_TOKEN (string, required) - you can use it for a CSRF token and compare it with `state` returned to `redirect_url`

+ Response 302

        If user approves the client they will be redirected to the client’s redirect URI with query string:
        * `code` 
        * `state`

+ Response 302

        If user denies the client they will be redirected to the client’s redirect URI with query string:
        * `error` 
        * `error_description`
        * `state`

### OAuth 2 - get access token [POST /oauth2/access_token]

+ Request (application/x-www-form-urlencoded)

    + Attributes ()
        + client_id (string, required)
        + client_secret (string, required)
        + grant_type (enum[string], required)
            + authorization_code - grant for getting access token after redirect, expiration is _7 days_
            + refresh_token - grant for refreshing access token, refresh token expiration is _30 days_
        + code (string, required) - after user approves the client they are redirected to `redirect_url` with `code` in the query string

+ Response 200 (application/json)

    + Body

            {
                "access_token": "a6780fb26a9672c73bdad8ad6b1ca4dde8266309",
                "expires_in": 604800,
                "token_type": "Bearer",
                "scope": null,
                "refresh_token": "bae7b0366c5351da6dbfd84436f36c4d7c670010"
            }

## Me [/v2/me]

_**Scopes:** every role has access to `/me` endpoints._

### User detail [GET /v2/me]

Basic information about current user and company.

+ Request

    + Headers

            Authorization: _check_authentication_section_

+ Response 200 (application/json)

    + Body

            {
                "data": {
                    "person": {
                        "id": 1,
                        "email": "test@example.com",
                        "first_name": "John",
                        "last_name": "Doe",
                        "role": "ADMIN"
                    },
                    "company": {
                        "id": 1,
                        "name": "ACME",
                        "addons": []
                    },
                    "links": {
                        "tokens": "https://new.costlocker.com/api-public/v2/me/tokens"
                    }
                }
            }

### Authorized applications [GET /v2/me/tokens]

List of active applications (tokens)
that are able to access Costlocker API.

+ Request

    + Headers

            Authorization: _check_authentication_section_

+ Response 200 (application/json)

    + Attributes
        + data (array)
            + (object)
                + app (object, required)
                    + name (string, required)
                + token (object, required)
                    + type (enum[string], required)
                        + oauth2 - authorized by user
                        + personal_access_token - managed by user
                        + company_access_token - managed by company owner - **legacy access token, will be removed in the future**
                    + expires (clDatetime, optional)
                + company (object, required)
                    + name (string, required)
                + links (object, required)

    + Body

            {
                "data": [
                    {
                        "app": {
                            "name": "Harvest Importer"
                        },
                        "token": {
                            "type": "oauth2",
                            "expires": "2017-05-13 18:01:12"
                        },
                        "company": {
                            "id": 1,
                            "name": "ACME"
                        },
                        "links": {
                            "app": "https://costlocker.github.io/",
                            "revoke": "https://new.costlocker.com/api-public/v2/me/tokens/Harvest Importer"
                        }
                    },
                    {
                        "app": {
                            "name": "Personal access token"
                        },
                        "token": {
                            "type": "personal_access_token",
                            "expires": null
                        },
                        "company": {
                            "id": 2,
                            "name": "My company"
                        },
                        "links": {
                            "app": "https://new.costlocker.com/api-token"
                        }
                    },
                    {
                        "app": {
                            "name": "Company access token (LEGACY)"
                        },
                        "token": {
                            "type": "company_access_token",
                            "expires": null
                        },
                        "company": {
                            "id": 2,
                            "name": "My company"
                        },
                        "links": {
                            "app": "https://new.costlocker.com/settings/api"
                        }
                    }
                ]
            }

### Revoke access to an OAuth application [DELETE /v2/me/tokens/{app}]

+ Parameters
    + app: `Harvest Importer` (string, required) - name of the revoked authorized app

+ Request

    + Headers

            Authorization: _check_authentication_section_

+ Response 200 (application/json)

    + Body

            {
                "data": [
                    {
                        "app": {
                            "name": "Harvest Importer"
                        }
                    }
                ]
            }

+ Response 404 (application/vnd.api+json)

    + Body

            {
                "errors": [
                    {
                        "status": 404,
                        "title": "OAuth app not found",
                        "detail": "You are not authorized in 'Harvest Importer', or the app does not exist"
                    }
                ]
            }


## Projects [/v2/projects/]

_**Scopes:** EMPLOYEE cannot manage projects, but he is able to read information about existing projects._

### Create/update projects [POST /v2/projects/]

People costs are upserted. If you send new client/person/tag/activity/task we will create new entities.
You can reference existing entities by ids, name (_case-insensitive_) or object with id/name.

We also recommend using existing projects as template for updating projects.
Take look at example requests in Apiary or check 
[our blog about Projects API](https://costlocker.github.io/blog/2017-05-14-import-projects-to-costlocker.html)

+ Request (application/vnd.api+json)

    + Headers

            Authorization: _check_authentication_section_

    + Attributes ()
        + data (array[clProjectEdit], required)

    + Body

            {
                "data": [
                    {
                        "name": "Created project",
                        "client": "name of client",
                        "tags": [
                            "billable"
                        ]
                    },
                    {
                        "id": 123456,
                        "name": "Updated project",
                        "client": 123456,
                        "dates": {
                            "date_start": "2017-03-20",
                            "date_end": "2017-05-20"
                        },
                        "responsible_people": [
                            "existing@example.com",
                            {
                                "email": "created@example.com",
                                "first_name": "Created",
                                "last_name": "Person",
                                "role": "ADMIN",
                                "salary": {
                                    "payment": "monthly",
                                    "salary": 10000,
                                    "hours": 160,
                                    "date_start": "2017-02-01"
                                }
                            }
                        ],
                        "budget": {
                            "type": "time_estimates.person_activity"
                        },
                        "items": [
                            {
                                "item": {
                                    "type": "person",
                                    "activity_id": 123456
                                },
                                "hours": {
                                    "budget": 10
                                },
                                "person": {
                                    "email": "employee@example.com",
                                    "first_name": "New",
                                    "last_name": "Employee",
                                    "role": "EMPLOYEE",
                                    "salary": {
                                        "payment": "hourly",
                                        "hourly_rate": 200
                                    }
                                }
                            },
                            {
                                "item": "billing",
                                "billing": {
                                    "total_amount": 0,
                                    "date": "2017-04-28"
                                }
                            },
                            {
                                "item": {
                                    "type": "expense"
                                },
                                "expense": {
                                    "description": "Invision",
                                    "purchased": {
                                        "total_amount": 1000
                                    },
                                    "billed": {
                                        "total_amount": 2000
                                    }
                                }
                            },
                            {
                                "item": {
                                    "type": "discount"
                                },
                                "discount": {
                                    "total_amount": 100
                                }
                            },
                            {
                                "action": "delete",
                                "item": "task",
                                "activity": "Costlocker",
                                "person": "deleted@example.com",
                                "task": "existing task name"
                            },
                            {
                                "action": "delete",
                                "item": {
                                    "type": "task",
                                    "activity_id": 123457,
                                    "person_id": 123456,
                                    "task_id": 123456
                                }
                            },
                            {
                                "action": "delete",
                                "item": {
                                    "type": "billing",
                                    "billing_id": 123456
                                }
                            },
                            {
                                "action": "delete",
                                "item": {
                                    "type": "expense",
                                    "expense_id": 123456
                                }
                            }
                        ]
                    },
                    {
                        "name": "Deleted project",
                        "action": "delete"
                    },
                    {
                        "name": "Finished project",
                        "action": "finish"
                    },
                    {
                        "name": "Reopened project",
                        "action": "reopen"
                    }
                ]
            }

+ Response 200 (application/json)

    + Body

            {
                "meta": {
                    "created": 1,
                    "updated": 4
                },
                "data": [
                    {
                        "action": "upsert",
                        "id": "2084",
                        "items": [],
                        "links": {
                            "project": "https://new.costlocker.com/api-public/v2/projects/123456",
                            "peoplecosts": "https://new.costlocker.com/api-public/v2/projects/123456?types=peoplecosts",
                            "billing": "https://new.costlocker.com/api-public/v2/projects/123456?types=billing",
                            "expenses": "https://new.costlocker.com/api-public/v2/projects/123456?types=expenses",
                            "discounts": "https://new.costlocker.com/api-public/v2/projects/123456?types=discounts"
                        }
                    },
                    {
                        "action": "upsert",
                        "id": "123456",
                        "items": [
                            {
                                "action": "upsert",
                                "item": {
                                    "type": "person",
                                    "activity_id": 123456,
                                    "person_id": 123459
                                }
                            },
                            {
                                "action": "upsert",
                                "item": {
                                    "type": "billing",
                                    "billing_id": 123456
                                }
                            },
                            {
                                "action": "upsert",
                                "item": {
                                    "type": "expense",
                                    "expense_id": 123456
                                }
                            },
                            {
                                "action": "upsert",
                                "item": {
                                    "type": "discount"
                                }
                            },
                            {
                                "action": "delete",
                                "item": {
                                    "type": "task",
                                    "activity_id": 123459,
                                    "person_id": 123459,
                                    "task_id": 123459
                                }
                            },
                            {
                                "action": "delete",
                                "item": {
                                    "type": "task",
                                    "activity_id": 123457,
                                    "person_id": 123456,
                                    "task_id": 123456
                                }
                            },
                            {
                                "action": "delete",
                                "item": {
                                    "type": "billing",
                                    "billing_id": 123456
                                }
                            },
                            {
                                "action": "delete",
                                "item": {
                                    "type": "expense",
                                    "expense_id": 123456
                                }
                            }
                        ],
                        "links": {
                            "project": "https://new.costlocker.com/api-public/v2/projects/123456",
                            "peoplecosts": "https://new.costlocker.com/api-public/v2/projects/123456?types=peoplecosts",
                            "billing": "https://new.costlocker.com/api-public/v2/projects/123456?types=billing",
                            "expenses": "https://new.costlocker.com/api-public/v2/projects/123456?types=expenses",
                            "discounts": "https://new.costlocker.com/api-public/v2/projects/123456?types=discounts"
                        }
                    },
                    {
                        "action": "delete",
                        "id": "2100",
                        "items": [],
                        "links": {}
                    },
                    {
                        "action": "finish",
                        "id": "2101",
                        "items": [],
                        "links": {
                            "project": "https://new.costlocker.com/api-public/v2/projects/123456",
                            "peoplecosts": "https://new.costlocker.com/api-public/v2/projects/123456?types=peoplecosts",
                            "billing": "https://new.costlocker.com/api-public/v2/projects/123456?types=billing",
                            "expenses": "https://new.costlocker.com/api-public/v2/projects/123456?types=expenses",
                            "discounts": "https://new.costlocker.com/api-public/v2/projects/123456?types=discounts"
                        }
                    },
                    {
                        "action": "reopen",
                        "id": "2102",
                        "items": [],
                        "links": {
                            "project": "https://new.costlocker.com/api-public/v2/projects/123456",
                            "peoplecosts": "https://new.costlocker.com/api-public/v2/projects/123456?types=peoplecosts",
                            "billing": "https://new.costlocker.com/api-public/v2/projects/123456?types=billing",
                            "expenses": "https://new.costlocker.com/api-public/v2/projects/123456?types=expenses",
                            "discounts": "https://new.costlocker.com/api-public/v2/projects/123456?types=discounts"
                        }
                    }
                ]
            }

+ Response 400 (application/vnd.api+json)

    + Body

            {
                "errors": [
                    {
                        "status": 400,
                        "title": "Invalid JSON request",
                        "source": {
                            "pointer": "/0/name"
                        },
                        "detail": "Value null is not a(n) \"string\""
                    }
                ]
            }

### Get projects [GET /v2/projects/{?page,state,types}]

Alternative display of [projects list from v1](http://docs.costlocker.apiary.io/#reference/0/projects/).
If you unset `id` you can use it as template for creating a new project.

Use `types` query parameter for loading
[project details](#reference/0/projects/get-project-detail) for multiple projects.
Items are loaded only for first 100 projects. Use pagination `?page[limit]=100&page[offset]=100`
if you'd like to load project details for more projects.

+ Parameters
    + page (object, optional)
        + limit (number, required)
        + offset: 0 (number, optional)
    + state (clProjectState, optional)
        + running
        + finished
    + types (enum, optional)
        + `` - by default no items are returned
        + peoplecosts
        + billing
        + expenses
        + discounts
        + `expenses,billing` - you can combine multiple types

+ Request

    + Headers

            Authorization: _check_authentication_section_

+ Response 200 (application/json)

    + Attributes ()
        + meta (object)
            + count (number) - number of returned projects
        + data (array[clProject], required)

    + Body

            {
                "meta": {
                    "count": 1
                },
                "data": [
                    {
                        "id": "123456",
                        "name": "Website",
                        "state": "running",
                        "client": {
                            "id": "123456",
                            "name": "Google"
                        },
                        "dates": {
                            "date_start": "2017-03-20",
                            "date_end": "2017-05-20"
                        },
                        "project_id": {
                            "id": null,
                            "is_generated": false
                        },
                        "tags": [
                            {
                                "name": "Billable"
                            }
                        ],
                        "responsible_people": [
                            {
                                "email": "test@example.com",
                                "first_name": "John",
                                "last_name": "Doe"
                            }
                        ],
                        "budget": {
                            "type": "time_estimates.person_activity"
                        },
                        "links": {
                            "project": "https://new.costlocker.com/api-public/v2/projects/123456",
                            "peoplecosts": "https://new.costlocker.com/api-public/v2/projects/123456?types=peoplecosts",
                            "billing": "https://new.costlocker.com/api-public/v2/projects/123456?types=billing",
                            "expenses": "https://new.costlocker.com/api-public/v2/projects/123456?types=expenses",
                            "discounts": "https://new.costlocker.com/api-public/v2/projects/123456?types=discounts"
                        }
                    }
                ]
            }

### Get project detail [GET /v2/projects/{id}{?types}]

Returns same project information like in projects list.
In addition, it returns flat [people costs](http://docs.costlocker.apiary.io/#reference/0/projects-people-costs/),
[billing](http://docs.costlocker.apiary.io/#reference/0/projects-billing),
[expenses](http://docs.costlocker.apiary.io/#reference/0/projects-expenses),
and discount.

You can ignore `is_aggregation` object during creating/updating people costs in project.
Such objects are always upserted if they don't exist or their existing hours budget is updated.

+ Parameters
    + id (number, required)
    + types (enum)
        + `` - by default all items are returned
        + peoplecosts
        + billing
        + expenses
        + discounts
        + `expenses,billing` - you can combine multiple types

+ Request

    + Headers

            Authorization: _check_authentication_section_

+ Response 200 (application/json)

    + Attributes ()
        + data (clProject, required)

    + Body

            {
                "data": {
                    "id": "123456",
                    "name": "Website",
                    "state": "running",
                    "client": {
                        "id": "123456",
                        "name": "Google"
                    },
                    "dates": {
                        "date_start": "2017-03-20",
                        "date_end": "2017-05-20"
                    },
                    "project_id": {
                        "id": null,
                        "is_generated": false
                    },
                    "tags": [
                        {
                            "name": "Billable"
                        }
                    ],
                    "responsible_people": [
                        {
                            "email": "test@example.com",
                            "first_name": "John",
                            "last_name": "Doe"
                        }
                    ],
                    "budget": {
                        "type": "time_estimates.person_activity"
                    },
                    "links": {
                        "project": "https://new.costlocker.com/api-public/v2/projects/123456",
                        "peoplecosts": "https://new.costlocker.com/api-public/v2/projects/123456?types=peoplecosts",
                        "billing": "https://new.costlocker.com/api-public/v2/projects/123456?types=billing",
                        "expenses": "https://new.costlocker.com/api-public/v2/projects/123456?types=expenses",
                        "discounts": "https://new.costlocker.com/api-public/v2/projects/123456?types=discounts"
                    },
                    "items": [
                        {
                            "item": {
                                "type": "project"
                            },
                            "budget": {
                                "total_amount": 10000
                            }
                        },
                        {
                            "item": {
                                "type": "activity",
                                "activity_id": "123456"
                            },
                            "hours": {
                                "budget": 40,
                                "tracked": 0,
                                "is_aggregation": true
                            },
                            "budget": {
                                "total_amount": 8000
                            },
                            "activity": {
                                "name": "Design",
                                "hourly_rate": 200
                            }
                        },
                        {
                            "item": {
                                "type": "person",
                                "activity_id": "123456",
                                "person_id": "123456"
                            },
                            "hours": {
                                "budget": 40,
                                "tracked": 0,
                                "is_aggregation": false
                            },
                            "person": {
                                "email": "test@example.com",
                                "first_name": "John",
                                "last_name": "Doe"
                            }
                        },
                        {
                            "item": {
                                "type": "activity",
                                "activity_id": "123457"
                            },
                            "hours": {
                                "budget": 20,
                                "tracked": 0,
                                "is_aggregation": true
                            },
                            "budget": {
                                "total_amount": 2000
                            },
                            "activity": {
                                "name": "Development",
                                "hourly_rate": 100
                            }
                        },
                        {
                            "item": {
                                "type": "person",
                                "activity_id": "123457",
                                "person_id": "123456"
                            },
                            "hours": {
                                "budget": 20,
                                "tracked": 0,
                                "is_aggregation": true
                            },
                            "person": {
                                "email": "test@example.com",
                                "first_name": "John",
                                "last_name": "Doe"
                            }
                        },
                        {
                            "item": {
                                "type": "task",
                                "activity_id": "123457",
                                "person_id": "123456",
                                "task_id": "123456"
                            },
                            "hours": {
                                "budget": 10,
                                "tracked": 0,
                                "is_aggregation": false
                            },
                            "task": {
                                "name": "Homepage"
                            }
                        },
                        {
                            "item": {
                                "type": "task",
                                "activity_id": "123457",
                                "person_id": "123456",
                                "task_id": "123457"
                            },
                            "hours": {
                                "budget": 10,
                                "tracked": 0,
                                "is_aggregation": false
                            },
                            "task": {
                                "name": "Contact form"
                            }
                        },
                        {
                            "item": {
                                "type": "billing",
                                "billing_id": "123457"
                            },
                            "billing": {
                                "description": "Invoice 20170002",
                                "total_amount": 100,
                                "date": "2017-04-14",
                                "status": "sent"
                            }
                        },
                        {
                            "item": {
                                "type": "expense",
                                "expense_id": "123457"
                            },
                            "expense": {
                                "description": "Invision",
                                "purchased": {
                                    "total_amount": 500,
                                    "date": null
                                },
                                "billed": {
                                    "total_amount": 500
                                }
                            }
                        },
                        {
                            "item": {
                                "type": "discount"
                            },
                            "discount": {
                                "total_amount": 100
                            }
                        }
                    ]
                }
            }

+ Response 404 (application/vnd.api+json)

    + Body

            {
                "errors": [
                    {
                        "status": 404,
                        "title": "Project not found",
                        "detail": "Project '123457' does not exist, or you are not authorized to see it"
                    }
                ]
            }

## Time entries [/v2/timeentries/]

Take a look at integration examples at https://costlocker.github.io/.

_**Scopes:** Every EMPLOYEE can manage his time entries. MANAGER, ADMIN and OWNER can manage time
entries from other persons._

### Create/update time entries [POST /v2/timeentries/]

+ Request (application/vnd.api+json)

    + Attributes
        + meta
            + finished_projects (enum, optional)
                + error - editing entries from finished projects causes an error
                + reopen - finished project is automatically opened and closed
        + data (array[clTimeentry], required)

    + Headers

            Authorization: _check_authentication_section_

    + Body
    
            {
                "data": [
                    {
                        "uuid": "c85d843e-c2ed-479e-9159-dda5e14177ab",
                        "description": "Init project",
                        "date": "2017-03-28 07:57:57",
                        "duration": 3600,
                        "assignment": {
                            "person_id": 1,
                            "project_id": 1,
                            "activity_id": 1,
                            "task_id": 1
                        }
                    },
                    {
                        "date": "2017-03-28 09:46:00",
                        "duration": 3600,
                        "assignment": {
                            "project_id": 1,
                            "activity_id": 1
                        },
                        "tags": "billable"
                    },
                    {
                        "date": "2017-03-28 09:46:00",
                        "description": "Start tracking",
                        "duration": null,
                        "assignment": {
                            "project_id": 1,
                            "activity_id": 1
                        },
                        "tags": ["nonbillable"]
                    },
                    {
                        "date": "2017-03-28 09:46:00",
                        "duration": null
                    }
                ]
            }

+ Response 200 (application/json)

    + Attributes

        + meta (clMetaUpsert, required)
            + `finished_projects`: 0 (number, optional) - number of finished projects (included only if `meta.finished_projects` used in request)
        + data (array[object], required)
            + uuid (clUuid, required) - uuid of created/updated time-entry
            + assignment (clTimeentryAssignment, required)
            + action (enum, required)
                + create
                + update
                + nothing - update that caused to no change

    + Body

            {
                "meta": {
                    "created": 1,
                    "updated": 2,
                    "finished_projects": 0
                },
                "data": [
                    {
                        "uuid": "c85d843e-c2ed-479e-9159-dda5e14177ab",
                        "assignment": {
                            "person_id": 1,
                            "project_id": 1,
                            "activity_id": 1,
                            "task_id": 1
                        },
                        "action": "create"
                    },
                    {
                        "uuid": "b0537a3d-ee6e-45d1-8734-2b4cdc00cfb3",
                        "assignment": {
                            "person_id": 1,
                            "project_id": 1,
                            "activity_id": 1,
                            "task_id": null
                        },
                        "action": "update"
                    },
                    {
                        "uuid": "d0537a3d-ee6e-45d1-8734-2b4cdc00cfb3",
                        "assignment": {
                            "person_id": 1,
                            "project_id": 1,
                            "activity_id": 1,
                            "task_id": null
                        },
                        "action": "nothing"
                    }
                ]
            }

+ Response 400 (application/vnd.api+json)

    + Body

            {
                "errors": [
                    {
                        "status": 400,
                        "title": "Invalid JSON request",
                        "detail": "Request must be json array, object, or data object"
                    }
                ]
            }

+ Response 400 (application/vnd.api+json)

    + Body

            {
                "errors": [
                    {
                        "status": 400,
                        "title": "Invalid JSON request",
                        "source": {
                            "pointer": "/0"
                        },
                        "detail": "Required properties missing: [\"date\"]"
                    },
                    {
                        "status": 400,
                        "title": "Invalid JSON request",
                        "source": {
                            "pointer": "/0/duration"
                        },
                        "detail": "Value \"long\" is not a(n) \"integer\""
                    },
                    {
                        "status": 400,
                        "title": "Invalid JSON request",
                        "source": {
                            "pointer": "/0/description"
                        },
                        "detail": "Value [\"one\",\"two\"] is not a(n) \"string\""
                    },
                    {
                        "status": 400,
                        "title": "Invalid JSON request",
                        "source": {
                            "pointer": "/0/assignment/person_id"
                        },
                        "detail": "Failed matching exactly one of the provided schemas."
                    },
                    {
                        "status": 400,
                        "title": "Invalid JSON request",
                        "source": {
                            "pointer": "/0/assignment/project_id"
                        },
                        "detail": "Value \"invalid id\" is not a(n) \"integer\""
                    },
                    {
                        "status": 400,
                        "title": "Invalid JSON request",
                        "source": {
                            "pointer": "/0/assignment/activity_id"
                        },
                        "detail": "Value null is not a(n) \"integer\""
                    }
                ]
            }

+ Response 409 (application/vnd.api+json)

    + Body

            {
                "errors": [
                    {
                        "status": 409,
                        "title": "Invalid time-entries",
                        "detail": "Person cannot track more than one entry at time"
                    }
                ]
            }

## Webhooks [/v2/webhooks/]

Subscription-based [webhooks](http://resthooks.org/)
with batching, fat payloads, three retries (_retry after 1, 5, and 15 minutes_),
10 seconds timeout, inline unsubscribe (_delete webhook after `410 Gone` response_).

_**Scopes:** Only ADMIN and OWNER can manage webhooks from a company._

You can try and manage webhooks at https://webhooks.integrations.costlocker.com/.

### Create/update webhooks [POST /v2/webhooks/]

Webhooks are created if `uuid` is NOT specified, otherwise webhooks are upserted
(create a new webhook, or update an existing webhook).

+ Request (application/vnd.api+json)

    + Headers

            Authorization: _check_authentication_section_

    + Attributes

        + data (array[clWebhookRequest], required)

    + Body

            {
                "data": [
                    {
                        "url": "http://create.com",
                        "is_enabled": true,
                        "events": [
                            "timeentries.create"
                        ]
                    },
                    {
                        "uuid": "e479ef4e-fe29-45c2-a119-5298538c4caa",
                        "url": "http://update.com",
                        "is_enabled": false,
                        "events": [
                            "timeentries.create"
                        ]
                    }
                ]
            }

+ Response 200 (application/json)

    + Attributes ()
        + meta (clMetaUpsert, required)
        + data (array[clWebhookCreate], required)

    + Body

            {
                "meta": {
                    "created": 1,
                    "updated": 0
                },
                "data": [
                    {
                        "uuid": "67be4380-49ff-b8d4-bdf7-3588b59d6e79",
                        "links": {  
                            "webhook":"https://new.costlocker.com/api-public/v2/webhooks/dd76b5e0-5b74-4a68-b0ad-db6efbed7b9c",
                            "example":"https://new.costlocker.com/api-public/v2/webhooks/dd76b5e0-5b74-4a68-b0ad-db6efbed7b9c/test"
                        }
                    }
                ]
            }

+ Response 400 (application/vnd.api+json)

    + Body

            {
                "errors": [
                    {
                        "status": 400,
                        "title": "Invalid JSON request",
                        "source": {
                            "pointer": "/0/url"
                        },
                        "detail": "Value \"not a url\" does not match the format \"uri\""
                    },
                    {
                        "status": 400,
                        "title": "Invalid JSON request",
                        "source": {
                            "pointer": "/0/events/0"
                        },
                        "detail": "Value \"unknown event\" is not one of: [\"timeentries.create\",\"timeentries.update\"]"
                    },
                    {
                        "status": 400,
                        "title": "Invalid JSON request",
                        "source": {
                            "pointer": "/0/events"
                        },
                        "detail": "Array [\"unknown event\",\"unknown event\"] is not unique."
                    }
                ]
            }

### Get webhooks [GET /v2/webhooks/]

+ Request

    + Headers

            Authorization: _check_authentication_section_

+ Response 200 (application/json)

    + Attributes ()
        + data (array[clWebhookFull], required)

    + Body

            {
                "data": [
                    {
                        "uuid": "67be4380-49ff-b8d4-bdf7-3588b59d6e79",
                        "url": "http://example.com",
                        "is_enabled": true,
                        "events": [
                            "timeentries.create"
                        ],
                        "links": {  
                            "webhook":"https://new.costlocker.com/api-public/v2/webhooks/dd76b5e0-5b74-4a68-b0ad-db6efbed7b9c",
                            "example":"https://new.costlocker.com/api-public/v2/webhooks/dd76b5e0-5b74-4a68-b0ad-db6efbed7b9c/test"
                        }
                    }
                ]
            }

### Get webhook detail [GET /v2/webhooks/{uuid}]

The detail contains the 20 most recent delivered webhooks in `recent_deliveries`, sorted with the most recent first.

+ Parameters
    + uuid (clUuid, required)

+ Request

    + Headers

            Authorization: _check_authentication_section_

+ Response 200 (application/json)

    + Attributes ()
        + data (clWebhookDetail, required)

    + Body

            {"data":{"uuid":"530c5330-1a39-1db0-eac5-3d1423ffba1f","url":"https://httpbin.org/status/410","is_enabled": true,"events":["timeentries.create","projects.create","peoplecosts.change","expenses.change","billing.change"],"recent_deliveries":[{"date":"2017-07-20T07:41:35+0000","request":{"url":"https://httpbin.org/status/410","headers":{"Content-Type":"application/json","X-Hook-Signature":"sha256=7051d74a699a3a48302adb1ddc99699f862012d5a7354ae8f580a5bd84c94e93"},"body":{"meta":{"events":{"timeentries.create":1}},"links":{"webhook":{"webhook":"https://new.costlocker.com/api-public/v2/webhooks/530c5330-1a39-1db0-eac5-3d1423ffba1f","example":"https://new.costlocker.com/api-public/v2/webhooks/530c5330-1a39-1db0-eac5-3d1423ffba1f/test"}},"data":[{"event":"timeentries.create","data":[{"uuid":"4d33d8f7-bb41-4956-a153-88ff2e7b7e9b","date":"2017-07-20T07:40:14+0000","duration":3600,"description":"testCreateValidJson","assignment":{"person_id":123456,"project_id":123456,"activity_id":123456,"task_id":null},"names":{"person_fullname":"Tester Test","project_name":"Tests","client_name":"Kamil","activity_name":"Costlocker","task_name":null}}]}]}},"response":{"status_code":410,"headers":{"Connection":"keep-alive","Server":"meinheld/0.6.1","Date":"Thu, 20 Jul 2017 07:41:10 GMT","Content-Type":"text/html; charset=utf-8","Access-Control-Allow-Origin":"*","Access-Control-Allow-Credentials":"true","X-Powered-By":"Flask","X-Processed-Time":"0.000495910644531","Content-Length":"0","Via":"1.1 vegur"},"duration":0.833100080490112}}],"links":{"webhook":"https://new.costlocker.com/api-public/v2/webhooks/530c5330-1a39-1db0-eac5-3d1423ffba1f","example":"https://new.costlocker.com/api-public/v2/webhooks/530c5330-1a39-1db0-eac5-3d1423ffba1f/test"}}}

+ Response 404 (application/vnd.api+json)

    + Body

            {
                "errors": [
                    {
                        "status": 404,
                        "title": "Webhook not found",
                        "detail": "Webhook 'bfef6a2d-cef4-d55c-97c3-203208177bd1' does not exist, or you are not authorized to see it"
                    }
                ]
            }

### Get webhook example [GET /v2/webhooks/{uuid}/test]

The returned data format is the same as what we are sending to your `url`.
Based on [polling url in zappier](https://zapier.com/developer/documentation/v2/rest-hooks/#required-to-go-global-set-a-polling-url).

Costlocker also signs webhook requests so you can optionally [verify that they originated from Costlocker](https://gist.github.com/costlockerbot/314aaf809c7a6f42dd33e8524fac5442).
The header `X-Hook-Signature` is a HMAC-SHA256 hash of the request body. The hash signature starts with used algorithm (`sha256=`).
The key used to sign this text is `client_secret` or `personal access token` used when the webhook was created
(_or updated if you've created the webhook before adding support for signatures_).

You can use `X-Hook-Signature` for detecting duplicite events.
When we don't get a response in 10 seconds timeout, we'll retry to send the webhook.
But you could already processed the webhook. In that case you might ignore the second call.

+ Parameters
    + uuid (clUuid, required)

+ Request

    + Headers

            Authorization: _check_authentication_section_

+ Response 200 (application/json)

    + Attributes
        + meta (object, required)
            + events (object) - number of event occurences
        + links (object, required)
            + webhook (string) - link to webhook resource
        + data (array[object], required) - aggregated events (one event is represented in one object)

    + Headers
        
            X-Hook-Signature: sha256=198_hash_from_request_body_signed_by_client_secret_or_personal_token_5f7

    + Body

            {"meta":{"events":{"timeentries.create":1,"timeentries.update":1,"projects.create":1,"peoplecosts.change":1,"expenses.change":1,"billing.change":1}},"links":{"webhook":{"webhook":"https://new.costlocker.com/api-public/v2/webhooks/dd76b5e0-5b74-4a68-b0ad-db6efbed7b9c","example":"https://new.costlocker.com/api-public/v2/webhooks/dd76b5e0-5b74-4a68-b0ad-db6efbed7b9c/test"}},"data":[{"event":"timeentries.create","data":[{"uuid":"139fce1b-c243-4890-b328-ec5d8394e073","date":"2017-06-09T09:53:06+0000","duration":3600,"description":"Init project","assignment":{"person_id":1,"project_id":1,"activity_id":1,"task_id":1},"names":{"person_fullname":"John Doe","project_name":"Website","client_name":"ACME","activity_name":"Design","task_name":"Homepage"}}]},{"event":"timeentries.update","data":[{"uuid":"e74dd664-ac42-473c-beae-e3081640c7a9","date":"2017-06-09T09:53:06+0000","duration":3600,"description":"Init project","assignment":{"person_id":1,"project_id":1,"activity_id":1,"task_id":1},"names":{"person_fullname":"John Doe","project_name":"Website","client_name":"ACME","activity_name":"Design","task_name":"Homepage"}}]},{"event":"projects.create","data":[{"id":1,"name":"Website","state":"running","client":{"id":1,"name":"ACME"},"dates":{"date_start":"2017-06-09","date_end":"2017-07-09"},"project_id":{"id":null,"is_generated":false},"tags":[{"name":"Billable"}],"responsible_people":[{"email":"john@example.com","first_name":"John","last_name":"Doe"}],"budget":{"type":"time_estimates.person_activity"},"links":{"project":"https://new.costlocker.com/api-public/v2/projects/1","peoplecosts":"https://new.costlocker.com/api-public/v2/projects/1?types=peoplecosts","billing":"https://new.costlocker.com/api-public/v2/projects/1?types=billing","expenses":"https://new.costlocker.com/api-public/v2/projects/1?types=expenses","discounts":"https://new.costlocker.com/api-public/v2/projects/1?types=discounts"}}]},{"event":"peoplecosts.change","data":[{"id":1,"items":[{"action":"upsert","item":{"type":"project"},"budget":{"total_amount":null}},{"action":"upsert","item":{"type":"activity","activity_id":1},"activity":{"name":"Design","hourly_rate":100},"hours":{"budget":null},"budget":{"total_amount":null}},{"action":"upsert","item":{"type":"person","activity_id":1,"person_id":1},"hours":{"budget":20},"person":{"email":"test@example.com","first_name":"Tester","last_name":"Test"},"activity":{"name":"Design"}},{"action":"upsert","item":{"type":"task","activity_id":1,"person_id":1,"task_id":1},"hours":{"budget":20},"person":{"email":"test@example.com","first_name":"Tester","last_name":"Test"},"activity":{"name":"Design"},"task":{"name":"Homepage"}},{"action":"delete","item":{"type":"activity","activity_id":2}},{"action":"delete","item":{"type":"person","activity_id":2,"person_id":2},"hours":{"budget":0}},{"action":"delete","item":{"type":"task","activity_id":2,"person_id":2,"task_id":2},"hours":{"budget":0}}],"links":{"project":"https://new.costlocker.com/api-public/v2/projects/1","peoplecosts":"https://new.costlocker.com/api-public/v2/projects/1?types=peoplecosts","billing":"https://new.costlocker.com/api-public/v2/projects/1?types=billing","expenses":"https://new.costlocker.com/api-public/v2/projects/1?types=expenses","discounts":"https://new.costlocker.com/api-public/v2/projects/1?types=discounts"}}]},{"event":"expenses.change","data":[{"id":1,"items":[{"action":"upsert","item":{"type":"expense","expense_id":1},"expense":{"description":"Invision license","purchased":{"total_amount":2000,"date":"2017-03-28"},"billed":{"total_amount":1000}}},{"action":"delete","item":{"type":"expense","expense_id":2}}],"links":{"project":"https://new.costlocker.com/api-public/v2/projects/1","peoplecosts":"https://new.costlocker.com/api-public/v2/projects/1?types=peoplecosts","billing":"https://new.costlocker.com/api-public/v2/projects/1?types=billing","expenses":"https://new.costlocker.com/api-public/v2/projects/1?types=expenses","discounts":"https://new.costlocker.com/api-public/v2/projects/1?types=discounts"}}]},{"event":"billing.change","data":[{"id":1,"items":[{"action":"upsert","item":{"type":"billing","billing_id":1},"billing":{"description":"Invoice 2017000019","total_amount":1000,"date":"2017-04-01","status":"sent"}},{"action":"delete","item":{"type":"billing","billing_id":2}}],"links":{"project":"https://new.costlocker.com/api-public/v2/projects/1","peoplecosts":"https://new.costlocker.com/api-public/v2/projects/1?types=peoplecosts","billing":"https://new.costlocker.com/api-public/v2/projects/1?types=billing","expenses":"https://new.costlocker.com/api-public/v2/projects/1?types=expenses","discounts":"https://new.costlocker.com/api-public/v2/projects/1?types=discounts"}}]}]}

+ Response 404 (application/vnd.api+json)

    + Body

            {
                "errors": [
                    {
                        "status": 404,
                        "title": "Webhook not found",
                        "detail": "Webhook 'bfef6a2d-cef4-d55c-97c3-203208177bd1' does not exist, or you are not authorized to see it"
                    }
                ]
            }

### Delete webhook [DELETE /v2/webhooks/{uuid}]

+ Parameters
    + uuid (clUuid, required)

+ Request

    + Headers

            Authorization: _check_authentication_section_

+ Response 200 (application/json)

    + Attributes ()
        + data (array[clWebhookDelete], required)

    + Body

            {
                "data": [
                    {
                        "uuid": "67be4380-49ff-b8d4-bdf7-3588b59d6e79"
                    }
                ]
            }

+ Response 404 (application/vnd.api+json)

    + Body

            {
                "errors": [
                    {
                        "status": 404,
                        "title": "Webhook not found",
                        "detail": "Webhook 'bfef6a2d-cef4-d55c-97c3-203208177bd1' does not exist, or you are not authorized to see it"
                    }
                ]
            }


## SIMPLE API v1 [/v1/]

**Employee/manager has restricted access!**
They cannot see all projects and timesheets, salaries, rates, revenues, billing etc..

### POST request [POST /v1/]

* The request is always called over **http://new.costlocker.com/api-public/v1/**.
* The request consists of a set of **function calls** grouped into a JSON object.
* **The called functions** can be combined arbitrarily.
* The called functions can contain **parameters**.
* The data are returned under the key of the function name.

+ Request (application/json)
     
      + Headers

            Authorization: _check_authentication_section_
    
    + Body

            {
                "Simple_People": {},
                "Simple_Timesheet": {
                    "datef": "2016-11-01",
                    "datet": "2016-11-30"
                }
            }

+ Response 200 (application/json)
    
    + Body

            {
                "Simple_People": [
                    {
                        "id": "1",
                        "first_name": "John",
                        "last_name": "Doe",
                        "mail": "john.doe@example.com",
                        "deactivated": false,
                        "type": "salary",
                        "salary_hours": 160,
                        "salary_amount": 30000
                    }
                ],
                "Simple_Timesheet": []
            }

## People [/v1/?Simple_People]

### List of active and inactive people [POST /v1/]

+ Request (application/json)
     
      + Headers

            Authorization: _check_authentication_section_
    
    + Body

            {
                "Simple_People": {}
            }

+ Response 200 (application/json)

    + Attributes
        + array[object]
            + id (number, required)
            + first_name (string, required)
            + last_name (string, required)
            + mail (string, required)
            + deactivated (boolean, required)
            + type (enum, required)
                + salary
                + hourly
            + salary_hours (number, optional) - when `type=salary`
            + salary_amount (number, optional) - when `type=salary`
            + hourly_rate (number, optional) - when `type=hourly`

    + Body


            {
                "Simple_People": [
                    {
                        "id": "1",
                        "first_name": "John",
                        "last_name": "Doe",
                        "mail": "john.doe@example.com",
                        "deactivated": false,
                        "type": "salary",
                        "salary_hours": 160,
                        "salary_amount": 30000
                    },
                    {
                        "id": "2",
                        "first_name": "James",
                        "last_name": "Bond",
                        "mail": "james.bond@example.com",
                        "deactivated": false,
                        "type": "hourly",
                        "hourly_rate": 500
                    }
                ]
            }

## Activities [/v1/?Simple_Activities]

### List of active and inactive activities [POST /v1/]

+ Request (application/json)
     
      + Headers

            Authorization: _check_authentication_section_
    
    + Body

            {
                "Simple_Activities": {}
            }

+ Response 200 (application/json)

        {
            "Simple_Activities": [
                { 
                    "id": "1", 
                    "name": "Design",
                    "deactivated": false
                }
            ]
        }


## Clients [/v1/?Simple_Clients]

### List of active and inactive clients [POST /v1/]

+ Request (application/json)
     
      + Headers

            Authorization: _check_authentication_section_
    
    + Body

            {
                "Simple_Clients": {}
            }

+ Response 200 (application/json)

        {
            "Simple_Clients": [
                { 
                    "id": "1", 
                    "name": "Google",
                    "deactivated": false
                }
            ]
        }

## Projects [/v1/?Simple_Projects]

Response contains `profit`, `revenue`, `costs`, ..., if [the authenticated user](/#reference/0/authentication) is `ADMIN` or `OWNER`.

Projects are ordered by `id DESC`.

### Filtered projects [POST /v1/]

+ Request (application/json)

    + Attributes
        + project (array[number], optional) - list of project ids
        + state (enum, optional)
            + running
            + finished
        + recurring: false (boolean, optional) - if recurring projects are included
        + limit (number, optional) - pagination, by default all projects are returned
        + offset: 0 (number, optional) - pagination

    + Headers

            Authorization: _check_authentication_section_
    
    + Body

            {
                "Simple_Projects": {
                    "project": [1, 2],
                    "limit": 20,
                    "offset": 0
                }
            }

+ Response 200 (application/json)

    + Attributes
        + array[object]
            + state (enum)
                + running
                + finished

    + Body

            {
                "Simple_Projects": [
                    {
                        "id": "1",
                        "name": "GMail Redesign",
                        "client_id": "1",
                        "state": "running",
                        "jobid": 1400001,
                        "da_start": "2014-10-24",
                        "da_end": "2014-12-24",
                        "da_created": "2014-12-24",
                        "da_close": null,
                        "revenue": 680400.00,
                        "billed": 85000.00,
                        "hours_budgeted": 480,
                        "hours_tracked": 250,
                        "budget": {
                            "type": "time_estimates.person_activity",
                            "total_amount": 680400.00
                        },
                        "responsible_people": [
                            {
                                "id": "1"
                            }, 
                            {
                                "id": "2"
                            }
                        ],
                        "tags": [
                            {
                                "id": "1"
                            },
                            {
                                "id": "2"
                            }
                        ]
                    }
                ]
            }

### List of all ongoing and closed projects [POST /v1/]

+ Request (application/json)

    + Headers

            Authorization: _check_authentication_section_
    
    + Body

            {
                "Simple_Projects": {
                }
            }

+ Response 200 (application/json)

    + Attributes
        + array[object]
            + state (enum)
                + running
                + finished

    + Body

            {
                "Simple_Projects": [
                    {
                        "id": "1",
                        "name": "GMail Redesign",
                        "client_id": "1",
                        "state": "running",
                        "jobid": 1400001,
                        "da_start": "2014-10-24",
                        "da_end": "2014-12-24",
                        "da_created": "2014-12-24",
                        "da_close": null,
                        "revenue": 680400.00,
                        "billed": 85000.00,
                        "hours_budgeted": 480,
                        "hours_tracked": 250,
                        "budget": {
                            "type": "time_estimates.person_activity",
                            "total_amount": 680400.00
                        },
                        "responsible_people": [
                            {
                                "id": "1"
                            }, 
                            {
                                "id": "2"
                            }
                        ],
                        "tags": [
                            {
                                "id": "1"
                            },
                            {
                                "id": "2"
                            }
                        ]
                    }
                ]
            }


## Projects - Billing [/v1/?Simple_Projects_Billing]

### Filtered billing [POST /v1/]

+ Request (application/json)

    + Attributes
        + project (array[number], optional) - list of project ids

    + Headers

            Authorization: _check_authentication_section_
    
    + Body

            {
                "Simple_Projects_Billing": {
                    "project": [1, 2]
                }
            }

+ Response 200 (application/json)

    + Body


            {
                "Simple_Projects_Billing": [
                    {
                        "id": "1",
                        "name": "Invoice201400001",
                        "project_id": "1",
                        "da": "2014-10-10",
                        "amount": 15200,
                        "issued": false
                    }
                ]
            }

### Billing items across ongoing and closed projects [POST /v1/]

+ Request (application/json)

    + Headers

            Authorization: _check_authentication_section_
    
    + Body

            {
                "Simple_Projects_Billing": {}
            }

+ Response 200 (application/json)


        {
            "Simple_Projects_Billing": [
                {
                    "id": "1",
                    "name": "Invoice201400001",
                    "project_id": "1",
                    "da": "2014-10-10",
                    "amount": 15200,
                    "issued": false
                }
            ]
        }



## Projects - People Costs [/v1/?Simple_Projects_Ce]

### Filtered People Costs [POST /v1/]

+ Request (application/json)

    + Attributes
        + project (array[number], optional) - list of project ids
        + person (array[number], optional) - list of person ids
        + activity (array[number], optional) - list of activity ids
        + client (array[number], optional) - list of client ids

    + Headers

            Authorization: _check_authentication_section_
    
    + Body

            {
                "Simple_Projects_Ce": {
                    "project": [1, 2],
                    "person": [1],
                    "activity": []
                }
            }

+ Response 200 (application/json)

    + Attributes
        + array[object]
            + person_rate (number) - hourly rate
            + person_overhead (number) - overhead

    + Body

            {
                "Simple_Projects_Ce": [
                    {
                        "project_id": "1",
                        "activity_id": "1",
                        "person_id": "1",
                        "hrs_budget": 50,
                        "hrs_tracked": 20,
                        "budget_activity": {
                            "total_amount": 30000,
                            "total_hours": 50
                        },
                        "client_rate": 1500.00,
                        "person_rate": 1000,
                        "person_overhead": 0,
                        "tasks": [
                            {
                                "name": "Analysis",
                                "hrs_budget": 20,
                                "hrs_tracked": 10
                            },
                            {
                                "name": "Redesign",
                                "hrs_budget": 30,
                                "hrs_tracked": 10
                            }
                        ]
                    },
                    {
                        "project_id": "2",
                        "activity_id": "1",
                        "person_id": "1",
                        "hrs_budget": 10,
                        "hrs_tracked": 0,
                        "budget_activity": {
                            "total_amount": 500,
                            "total_hours": 10
                        },
                        "client_rate": 50,
                        "person_rate": 50,
                        "person_overhead": 100
                    }
                ]
            }


### People Costs across ongoing and closed projects. [POST /v1/]

+ Request (application/json)
     
      + Headers

            Authorization: _check_authentication_section_
    
    + Body

            {
                "Simple_Projects_Ce": {}
            }

+ Response 200 (application/json)

        {
            "Simple_Projects_Ce": [
                {
                    "project_id": "1",
                    "activity_id": "1",
                    "person_id": "1",
                    "hrs_budget": 50,
                    "hrs_tracked": 20,
                    "budget_activity": {
                        "amount": 30000,
                        "hours": 50
                    },
                    "client_rate": 1500.00,
                    "person_rate": 1000,
                    "person_overhead": 0,
                    "tasks": [
                        {
                            "name": "Analysis",
                            "hrs_budget": 20,
                            "hrs_tracked": 10
                        },
                        {
                            "name": "Redesign",
                            "hrs_budget": 30,
                            "hrs_tracked": 10
                        }
                    ]
                },
                {
                    "project_id": "2",
                    "activity_id": "1",
                    "person_id": "1",
                    "hrs_budget": 10,
                    "hrs_tracked": 0,
                    "budget_activity": {
                        "amount": 500,
                        "hours": 10
                    },
                    "client_rate": 50,
                    "person_rate": 500,
                    "person_overhead": 100
                }
            ]
        }

## Projects - Expenses [/v1/?Simple_Projects_Expenses]

### Filtered expenses [POST /v1/]

+ Request (application/json)

    + Attributes
        + project (array[number], optional) - list of project ids

    + Headers

            Authorization: _check_authentication_section_
    
    + Body

            {
                "Simple_Projects_Expenses": {
                    "project": [1, 2]
                }
            }

+ Response 200 (application/json)

    + Body


            {
                "Simple_Projects_Expenses": [
                    {
                        "id": "1",
                        "project_id": "1",
                        "name": "Invision",
                        "date": "2014-09-18",
                        "buy": 3000,
                        "sell": 3000
                    }
                ]
            }

### Project Expenses across running and finished projects [POST /v1/]

+ Request (application/json)
     
      + Headers

            Authorization: _check_authentication_section_
    
    + Body

            {
                "Simple_Projects_Expenses": {}
            }

+ Response 200 (application/json)

        {
            "Simple_Projects_Expenses": [
                {
                    "id": "1",
                    "project_id": "1",
                    "name": "Invision",
                    "date": "2014-09-18",
                    "buy": 3000,
                    "sell": 3000
                }
            ]
        }


## Timesheet [/v1/?Simple_Timesheet]

### Filtered entries [POST /v1/]

+ Request (application/json)

    + Attributes
        + uuid (array[clUuid], optional) - array of entries id's to be limited
        + project (array[number], optional) - array of projects id's to be limited
        + person (array[number], optional) - array of people id's to be limited
        + activity (array[number], optional) - array of acitivities is's to be limited
        + client (array[number], optional) - array of clients id's to be limited
        + isRunning: false (boolean, optional) -  if only running entries are returned, `nonproject=true` is recommended for finding running entries
        + nonproject: false (boolean, optional) -  if no-project entries are included in response
        + description_name (string, optional) - filter by description - case insensitive, diacritic insensitive
        + task_name (string, optional) - filter by task name - case-insensitive, diacritic-insensitive
        + datef (clDate, optional) - only entries created after specific date (Y-m-d)
        + datet (clDate, optional) - only entries created before specific date (Y-m-d)
        + withUuids: false (boolean, optional) - if `true` then `uuid` attribute is returned for each entry
        + withBillable: false (boolean, optional) - if `true` then `billable` attribute is returned for each entry _(seconds billable)_
        + withRates: false (boolean, optional) - if `true` then `client_rate`, `person_rate`, `person_overhead` attributes are returned (just like in `Simple_Projects_Ce`)
        + limit (number, optional) - pagination, by default all projects are returned
        + offset: 0 (number, optional) - pagination

    + Headers

            Authorization: _check_authentication_section_
    
    + Body

            {
                "Simple_Timesheet": {
                    "project": [1, 2],
                    "person": [1],
                    "activity": [],
                    "client": [],
                    "nonproject": true,
                    "description_name": null,
                    "task_name": null,
                    "datef": "2016-11-01",
                    "datet": "2016-11-30",
                    "withRates": true,
                    "withBillable": true,
                    "withUuids": true,
                    "limit": 5,
                    "offset": 0
                }
            }

+ Response 200 (application/json)

        {
            "Simple_Timesheet": [
                {
                    "uuid":"cc886881-bb07-4b6f-8c7e-db3495eecfe9",
                    "date": "2015-07-08T20:09:16+0000",
                    "project": "1",
                    "person": "1",
                    "activity": "1",
                    "client": "2",
                    "task": "1",
                    "interval": 1800,
                    "billable": 1800,
                    "description": "Explore current app",
                    "task_name": "Analysis",
                    "client_rate": 1500.00,
                    "person_rate": 1000,
                    "person_overhead": 0
                },
                {
                    "uuid":"cc886881-bb07-4b6f-8c7e-db3495eecfe8",
                    "date": "2015-02-09T20:09:16+0000",
                    "project": "2",
                    "person": "1",
                    "activity": "3",
                    "client": "2",
                    "task": "2",
                    "interval": 9823,
                    "billable": 0,
                    "description": "Spike solution in Invision",
                    "task_name": "Redesign",
                    "client_rate": 50,
                    "person_rate": 500,
                    "person_overhead": 100
                },      
                {
                    "uuid":"cc886881-bb07-4b6f-8c7e-db3495eecfe7",
                    "date":"2016-11-29T10:32:06+0000",
                    "project":null,
                    "person":"1",
                    "activity":null,
                    "client":null,
                    "task":null,
                    "interval":7194,
                    "billable": 3600,
                    "description":"Preparing new project",
                    "task_name":null,
                    "client_rate":null,
                    "person_rate":null,
                    "person_overhead":null
                }
            ]   
        }

### All entries [POST /v1/]

* `withRates=false` - entries are without rates (client rate, person rate, person overhead)
* `nonproject=false` - entries with assigned project, no-project entries are ignored

+ Request (application/json)

    + Headers

            Authorization: _check_authentication_section_
    
    + Body

            {
                "Simple_Timesheet": {}
            }

+ Response 200 (application/json)


        {
            "Simple_Timesheet": [
                {
                    "date": "2015-07-08T20:09:16+0000",
                    "project": "1",
                    "person": "1",
                    "activity": "1",
                    "client": "2",
                    "task": "1",
                    "interval": 1800,
                    "description": "Explore current app",
                    "task_name": "Analysis"
                },
                {
                    "date": "2015-02-09T20:09:16+0000",
                    "project": "2",
                    "person": "1",
                    "activity": "3",
                    "client": "2",
                    "task": "2",
                    "interval": 9823,
                    "description": "Spike solution in Invision",
                    "task_name": "Redesign"
                }
            ] 
        }

## Tracking [/v1/?Simple_Tracking]

Format like in [`timeentries` webhook](/#reference/0/webhooks/get-webhook-example).
`assignment` can be used for [creating/updating time-entries](/#reference/0/time-entries/create/update-time-entries).

### Running entry [POST /v1/]

Returns `null` if no entry is running.

+ Request (application/json)

    + Headers

            Authorization: _check_authentication_section_
    
    + Body

            {
                "Simple_Tracking_RunningEntry": {}
            }

+ Response 200 (application/json)

        {
            "Simple_Tracking_RunningEntry": {
                "uuid": "139fce1b-c243-4890-b328-ec5d8394e073",
                "date": "2017-06-09T09:53:06+0000",
                "duration": null,
                "description": "Init project",
                "assignment": {
                    "person_id": 1,
                    "project_id": 1,
                    "activity_id": 1,
                    "task_id": 1
                },
                "names": {
                    "person_fullname": "John Doe",
                    "project_name": "Website",
                    "client_name": "ACME",
                    "activity_name": "Design",
                    "task_name": "Homepage"
                }
            }
        }

+ Response 200 (application/json)


        {
            "Simple_Tracking_RunningEntry": null
        }

### Available assignments [POST /v1/]

Unlocked assignments from currently running projects.

+ Request (application/json)

    + Headers

            Authorization: _check_authentication_section_
    
    + Body

            {
                "Simple_Tracking_Assignments": {}
            }

+ Response 200 (application/json)

        {
            "Simple_Tracking_Assignments": [
                {
                    "assignment": {
                        "person_id": 1,
                        "project_id": null,
                        "activity_id": null,
                        "task_id": null
                    },
                    "names": {
                        "person_fullname": "John Doe",
                        "project_name": null,
                        "client_name": null,
                        "activity_name": null,
                        "task_name": null
                    }
                },
                {
                    "assignment": {
                        "person_id": 1,
                        "project_id": 1,
                        "activity_id": 1,
                        "task_id": 1
                    },
                    "names": {
                        "person_fullname": "John Doe",
                        "project_name": "Website",
                        "client_name": "ACME",
                        "activity_name": "Design",
                        "task_name": "Homepage"
                    }
                }
            ]
        }

## Tags [/v1/?Simple_Tags]

### List of all tags [POST /v1/]

+ Request (application/json)
     
      + Headers

            Authorization: _check_authentication_section_
    
    + Body

            {
                "Simple_Tags": {}
            }

+ Response 200 (application/json)

        {
            "Simple_Tags": [
                { 
                    "id": "1", 
                    "name": "billable"
                },
                { 
                    "id": "2", 
                    "name": "design"
                }
            ]
        }

## Overhead Costs [/v1/?Simple_Overheads]

_**Scopes:** Only ADMIN and OWNER can read overhead costs._

### List of all overhead costs [POST /v1/]

+ Request (application/json)
     
      + Headers

            Authorization: _check_authentication_section_
    
    + Body

            {
                "Simple_Overheads": {}
            }

+ Response 200 (application/json)

    + Attributes
        + array[object]
            + id (number, required)
            + name (string, required)
            + amount (number, required)
            + da_start (clDate, required)
            + da_end (clDate)

    + Body

            {
                "Simple_Overheads": [
                    {"id":"1","name":"Internet","amount":20,"da_start":"2016-01-01","da_end":"2016-12-31"},
                    {"id":"2","name":"Cell phones","amount":100,"da_start":"2016-11-01","da_end":null}
                ]
            }
